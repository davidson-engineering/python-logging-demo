version: 1  # You must include this or the config doesn't work. It's to ensure backward compatibility

disable_existing_loggers: true  # Disable any existing loggers that are already configured


formatters:
  # Default formatter for log messages, includes log level
  # Used on __main__ logger
  standard:
    format: "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
  # Formatter for log messages from the 'node' module, includes node_id in log message
  node:
    format: "%(asctime)s [%(levelname)s] %(name)s: {%(node_id)s | %(node_type)s} %(message)s"
  # Colored formatter for console output, colors log levels and node_id's
  colored_node:
    class: node.base.logging_formats.ColoredNodeFormatter
    format: "%(asctime)s [%(levelname)s] %(name)s: {%(node_id)s | %(node_type)s} %(message)s"
  # JSON formatter for log files
  json:
    # class: node.base.logging_formats.CustomJsonFormatter
    class: node.base.logging_formats.JsonFormatter
    fmt: '%(level)s %(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s %(threadName)s %(special)s %(run)s\
                %(name)s %(created)s %(processName)s %(relativeCreated)d %(funcName)s %(levelno)d %(msecs)d %(pathname)s %(lineno)d %(filename)s'
  # Submodule requiring a different formatter than the base (log message is colorized)
  submodule:
    class: node.base.logging_formats.SubmoduleLogFormatter
    fmt: "%(asctime)s [%(levelname)s] %(name)s: %(message)s"

handlers:
  # Default handler, console only
  console:
    level: INFO
    formatter: standard
    class: logging.StreamHandler
    stream: ext://sys.stdout
  # Node-specific console handler, includes node_id in log message
  console_node:
    level: INFO
    formatter: colored_node
    class: logging.StreamHandler
    stream: ext://sys.stdout

  # Submodule node console handler, which is colorized
  submodule_node_console:
    level: INFO
    formatter: submodule
    class: logging.StreamHandler
    stream: ext://sys.stdout 
  
  # File handler for base module
  base_file:
    level: DEBUG
    formatter: json
    class: logging.FileHandler
    filename: logs/base.log
    mode: w
  # File handler for custom module (to demonstrate routing piping to multiple files)
  custom_file:
    level: DEBUG
    formatter: json
    class: logging.FileHandler
    filename: logs/custom.log
    mode: w
  # File handler for master log file, with log rotation
  # In practice I still use a separate file for each module, but this is just to demonstrate
  master_log_file:
    class : logging.handlers.RotatingFileHandler
    formatter: json
    level   : DEBUG
    filename: logs/master.log
    maxBytes: 10_000_000
    backupCount: 7
    mode: w

loggers:
  # Logger for the 'node' module
  # Logs from this logger will be written to the console and to the master file
  # Note that the custom node handler is used to ensure that the node_id is included in the log message sent to console output
  node:
    handlers:
      - master_log_file
      - console_node
    level: DEBUG
    propagate: false

  # Logger for the 'node.base' module
  # Logs from this logger will be written to the console and to a module-specific file
  node.base:
    handlers:
      - base_file
    level: DEBUG
    propagate: true

  # Logger for the 'node.base.submodule' module
  # Logs from this logger will be written to the console and colored using a custom formatter
  # IMPORTANT NOTE: The order of the handlers is important, as the first handler in the list any applied formatters and filters will propagate to the next handler in the list
  node.base.submodule:
    handlers:
      - master_log_file
      - submodule_node_console
    level: DEBUG
    propagate: false


  # Logger for the 'node.custom' module
  # Logs from this logger will be written to the console and to a module-specific file
  node.custom:
    handlers:
      - custom_file
    level: DEBUG
    propagate: true

  # Logger for the '__main__' module
  # Note that the default handler is used to log messages from the main module
  __main__:  # if __name__ == '__main__'
    handlers:
      - console
    level: DEBUG
    propagate: false

# Having this logger will ensure that all uncaptured log messages are sent to user at the level of WARNING
root:
  level: ERROR
  handlers:
    - console
